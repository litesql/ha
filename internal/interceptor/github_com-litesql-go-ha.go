// Code generated by 'yaegi extract github.com/litesql/go-ha'. DO NOT EDIT.

package interceptor

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"github.com/litesql/go-ha"
	"go/constant"
	"go/token"
	"io"
	"reflect"
)

func init() {
	Symbols["github.com/litesql/go-ha/ha"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DefaultStream":            reflect.ValueOf(constant.MakeFromLiteral("\"ha_replication\"", token.STRING, 0)),
		"ErrInvalidSQL":            reflect.ValueOf(&ha.ErrInvalidSQL).Elem(),
		"ErrNatsNotConfigured":     reflect.ValueOf(&ha.ErrNatsNotConfigured).Elem(),
		"LatestSnapshot":           reflect.ValueOf(ha.LatestSnapshot),
		"NameToOptions":            reflect.ValueOf(ha.NameToOptions),
		"NewChangeSet":             reflect.ValueOf(ha.NewChangeSet),
		"NewConnector":             reflect.ValueOf(ha.NewConnector),
		"NewJSONPublisher":         reflect.ValueOf(ha.NewJSONPublisher),
		"NewNATSPublisher":         reflect.ValueOf(ha.NewNATSPublisher),
		"NewNATSSnapshotter":       reflect.ValueOf(ha.NewNATSSnapshotter),
		"NewNATSSubscriber":        reflect.ValueOf(ha.NewNATSSubscriber),
		"NewNoopPublisher":         reflect.ValueOf(ha.NewNoopPublisher),
		"NewNoopSnapshotter":       reflect.ValueOf(ha.NewNoopSnapshotter),
		"NewNoopSubscriber":        reflect.ValueOf(ha.NewNoopSubscriber),
		"NewWriterPublisher":       reflect.ValueOf(ha.NewWriterPublisher),
		"Parse":                    reflect.ValueOf(ha.Parse),
		"ParseStatement":           reflect.ValueOf(ha.ParseStatement),
		"TypeAlterTable":           reflect.ValueOf(constant.MakeFromLiteral("\"ALTER TABLE\"", token.STRING, 0)),
		"TypeAnalyze":              reflect.ValueOf(constant.MakeFromLiteral("\"ANALYZE\"", token.STRING, 0)),
		"TypeBegin":                reflect.ValueOf(constant.MakeFromLiteral("\"BEGIN\"", token.STRING, 0)),
		"TypeCommit":               reflect.ValueOf(constant.MakeFromLiteral("\"COMMIT\"", token.STRING, 0)),
		"TypeCreateIndex":          reflect.ValueOf(constant.MakeFromLiteral("\"CREATE INDEX\"", token.STRING, 0)),
		"TypeCreateTable":          reflect.ValueOf(constant.MakeFromLiteral("\"CREATE TABLE\"", token.STRING, 0)),
		"TypeCreateTrigger":        reflect.ValueOf(constant.MakeFromLiteral("\"CREATE TRIGGER\"", token.STRING, 0)),
		"TypeCreateView":           reflect.ValueOf(constant.MakeFromLiteral("\"CREATE VIEW\"", token.STRING, 0)),
		"TypeCreateVirtualTable":   reflect.ValueOf(constant.MakeFromLiteral("\"CREATE VIRTUAL TABLE\"", token.STRING, 0)),
		"TypeDelete":               reflect.ValueOf(constant.MakeFromLiteral("\"DELETE\"", token.STRING, 0)),
		"TypeDrop":                 reflect.ValueOf(constant.MakeFromLiteral("\"DROP\"", token.STRING, 0)),
		"TypeExplain":              reflect.ValueOf(constant.MakeFromLiteral("\"EXPLAIN\"", token.STRING, 0)),
		"TypeInsert":               reflect.ValueOf(constant.MakeFromLiteral("\"INSERT\"", token.STRING, 0)),
		"TypeOther":                reflect.ValueOf(constant.MakeFromLiteral("\"OTHER\"", token.STRING, 0)),
		"TypeRelease":              reflect.ValueOf(constant.MakeFromLiteral("\"RELEASE\"", token.STRING, 0)),
		"TypeRollback":             reflect.ValueOf(constant.MakeFromLiteral("\"ROLLBACK\"", token.STRING, 0)),
		"TypeSavepoint":            reflect.ValueOf(constant.MakeFromLiteral("\"SAVEPOINT\"", token.STRING, 0)),
		"TypeSelect":               reflect.ValueOf(constant.MakeFromLiteral("\"SELECT\"", token.STRING, 0)),
		"TypeUpdate":               reflect.ValueOf(constant.MakeFromLiteral("\"UPDATE\"", token.STRING, 0)),
		"TypeVacuum":               reflect.ValueOf(constant.MakeFromLiteral("\"VACUUM\"", token.STRING, 0)),
		"WithCDCPublisher":         reflect.ValueOf(ha.WithCDCPublisher),
		"WithCDCSubscriber":        reflect.ValueOf(ha.WithCDCSubscriber),
		"WithChangeSetInterceptor": reflect.ValueOf(ha.WithChangeSetInterceptor),
		"WithDBSnapshotter":        reflect.ValueOf(ha.WithDBSnapshotter),
		"WithDeliverPolicy":        reflect.ValueOf(ha.WithDeliverPolicy),
		"WithDisableDDLSync":       reflect.ValueOf(ha.WithDisableDDLSync),
		"WithEmbeddedNatsConfig":   reflect.ValueOf(ha.WithEmbeddedNatsConfig),
		"WithExtensions":           reflect.ValueOf(ha.WithExtensions),
		"WithName":                 reflect.ValueOf(ha.WithName),
		"WithNatsOptions":          reflect.ValueOf(ha.WithNatsOptions),
		"WithPublisherTimeout":     reflect.ValueOf(ha.WithPublisherTimeout),
		"WithReplicas":             reflect.ValueOf(ha.WithReplicas),
		"WithReplicationStream":    reflect.ValueOf(ha.WithReplicationStream),
		"WithReplicationURL":       reflect.ValueOf(ha.WithReplicationURL),
		"WithSnapshotInterval":     reflect.ValueOf(ha.WithSnapshotInterval),
		"WithStreamMaxAge":         reflect.ValueOf(ha.WithStreamMaxAge),
		"WithWaitFor":              reflect.ValueOf(ha.WithWaitFor),

		// type definitions
		"BackupFn":             reflect.ValueOf((*ha.BackupFn)(nil)),
		"CDCPublisher":         reflect.ValueOf((*ha.CDCPublisher)(nil)),
		"CDCSubscriber":        reflect.ValueOf((*ha.CDCSubscriber)(nil)),
		"Change":               reflect.ValueOf((*ha.Change)(nil)),
		"ChangeSet":            reflect.ValueOf((*ha.ChangeSet)(nil)),
		"ChangeSetInterceptor": reflect.ValueOf((*ha.ChangeSetInterceptor)(nil)),
		"ChangeSetSerializer":  reflect.ValueOf((*ha.ChangeSetSerializer)(nil)),
		"ConnHooksFactory":     reflect.ValueOf((*ha.ConnHooksFactory)(nil)),
		"ConnHooksProvider":    reflect.ValueOf((*ha.ConnHooksProvider)(nil)),
		"Connector":            reflect.ValueOf((*ha.Connector)(nil)),
		"DBSnapshotter":        reflect.ValueOf((*ha.DBSnapshotter)(nil)),
		"DriverProvider":       reflect.ValueOf((*ha.DriverProvider)(nil)),
		"EmbeddedNatsConfig":   reflect.ValueOf((*ha.EmbeddedNatsConfig)(nil)),
		"JSONPublisher":        reflect.ValueOf((*ha.JSONPublisher)(nil)),
		"NATSPublisher":        reflect.ValueOf((*ha.NATSPublisher)(nil)),
		"NATSSnapshotter":      reflect.ValueOf((*ha.NATSSnapshotter)(nil)),
		"NATSSubscriber":       reflect.ValueOf((*ha.NATSSubscriber)(nil)),
		"NoopPublisher":        reflect.ValueOf((*ha.NoopPublisher)(nil)),
		"NoopSnapshotter":      reflect.ValueOf((*ha.NoopSnapshotter)(nil)),
		"NoopSubscriber":       reflect.ValueOf((*ha.NoopSubscriber)(nil)),
		"Option":               reflect.ValueOf((*ha.Option)(nil)),
		"SequenceProvider":     reflect.ValueOf((*ha.SequenceProvider)(nil)),
		"Statement":            reflect.ValueOf((*ha.Statement)(nil)),
		"WriterPublisher":      reflect.ValueOf((*ha.WriterPublisher)(nil)),

		// interface wrapper definitions
		"_CDCPublisher":         reflect.ValueOf((*_github_com_litesql_go_ha_CDCPublisher)(nil)),
		"_CDCSubscriber":        reflect.ValueOf((*_github_com_litesql_go_ha_CDCSubscriber)(nil)),
		"_ChangeSetInterceptor": reflect.ValueOf((*_github_com_litesql_go_ha_ChangeSetInterceptor)(nil)),
		"_ConnHooksProvider":    reflect.ValueOf((*_github_com_litesql_go_ha_ConnHooksProvider)(nil)),
		"_DBSnapshotter":        reflect.ValueOf((*_github_com_litesql_go_ha_DBSnapshotter)(nil)),
		"_DriverProvider":       reflect.ValueOf((*_github_com_litesql_go_ha_DriverProvider)(nil)),
		"_SequenceProvider":     reflect.ValueOf((*_github_com_litesql_go_ha_SequenceProvider)(nil)),
	}
}

// _github_com_litesql_go_ha_CDCPublisher is an interface wrapper for CDCPublisher type
type _github_com_litesql_go_ha_CDCPublisher struct {
	IValue   interface{}
	WPublish func(cs *ha.ChangeSet) error
}

func (W _github_com_litesql_go_ha_CDCPublisher) Publish(cs *ha.ChangeSet) error {
	return W.WPublish(cs)
}

// _github_com_litesql_go_ha_CDCSubscriber is an interface wrapper for CDCSubscriber type
type _github_com_litesql_go_ha_CDCSubscriber struct {
	IValue          interface{}
	WDeliveredInfo  func(ctx context.Context, name string) (any, error)
	WLatestSeq      func() uint64
	WRemoveConsumer func(ctx context.Context, name string) error
	WStart          func() error
}

func (W _github_com_litesql_go_ha_CDCSubscriber) DeliveredInfo(ctx context.Context, name string) (any, error) {
	return W.WDeliveredInfo(ctx, name)
}
func (W _github_com_litesql_go_ha_CDCSubscriber) LatestSeq() uint64 {
	return W.WLatestSeq()
}
func (W _github_com_litesql_go_ha_CDCSubscriber) RemoveConsumer(ctx context.Context, name string) error {
	return W.WRemoveConsumer(ctx, name)
}
func (W _github_com_litesql_go_ha_CDCSubscriber) Start() error {
	return W.WStart()
}

// _github_com_litesql_go_ha_ChangeSetInterceptor is an interface wrapper for ChangeSetInterceptor type
type _github_com_litesql_go_ha_ChangeSetInterceptor struct {
	IValue       interface{}
	WAfterApply  func(a0 *ha.ChangeSet, a1 *sql.Conn, a2 error) error
	WBeforeApply func(a0 *ha.ChangeSet, a1 *sql.Conn) (skip bool, err error)
}

func (W _github_com_litesql_go_ha_ChangeSetInterceptor) AfterApply(a0 *ha.ChangeSet, a1 *sql.Conn, a2 error) error {
	return W.WAfterApply(a0, a1, a2)
}
func (W _github_com_litesql_go_ha_ChangeSetInterceptor) BeforeApply(a0 *ha.ChangeSet, a1 *sql.Conn) (skip bool, err error) {
	return W.WBeforeApply(a0, a1)
}

// _github_com_litesql_go_ha_ConnHooksProvider is an interface wrapper for ConnHooksProvider type
type _github_com_litesql_go_ha_ConnHooksProvider struct {
	IValue         interface{}
	WDisableHooks  func(a0 *sql.Conn) error
	WEnableHooks   func(a0 *sql.Conn) error
	WRegisterHooks func(a0 driver.Conn) (driver.Conn, error)
}

func (W _github_com_litesql_go_ha_ConnHooksProvider) DisableHooks(a0 *sql.Conn) error {
	return W.WDisableHooks(a0)
}
func (W _github_com_litesql_go_ha_ConnHooksProvider) EnableHooks(a0 *sql.Conn) error {
	return W.WEnableHooks(a0)
}
func (W _github_com_litesql_go_ha_ConnHooksProvider) RegisterHooks(a0 driver.Conn) (driver.Conn, error) {
	return W.WRegisterHooks(a0)
}

// _github_com_litesql_go_ha_DBSnapshotter is an interface wrapper for DBSnapshotter type
type _github_com_litesql_go_ha_DBSnapshotter struct {
	IValue          interface{}
	WLatestSnapshot func(ctx context.Context) (sequence uint64, reader io.ReadCloser, err error)
	WTakeSnapshot   func(ctx context.Context, db *sql.DB) (sequence uint64, err error)
}

func (W _github_com_litesql_go_ha_DBSnapshotter) LatestSnapshot(ctx context.Context) (sequence uint64, reader io.ReadCloser, err error) {
	return W.WLatestSnapshot(ctx)
}
func (W _github_com_litesql_go_ha_DBSnapshotter) TakeSnapshot(ctx context.Context, db *sql.DB) (sequence uint64, err error) {
	return W.WTakeSnapshot(ctx, db)
}

// _github_com_litesql_go_ha_DriverProvider is an interface wrapper for DriverProvider type
type _github_com_litesql_go_ha_DriverProvider struct {
	IValue            interface{}
	WConnWithoutHooks func() (*sql.Conn, error)
	WEnableHooks      func(conn *sql.Conn)
	WOnConnect        func(c driver.Conn) (driver.Conn, error)
	WOpen             func(name string) (driver.Conn, error)
}

func (W _github_com_litesql_go_ha_DriverProvider) ConnWithoutHooks() (*sql.Conn, error) {
	return W.WConnWithoutHooks()
}
func (W _github_com_litesql_go_ha_DriverProvider) EnableHooks(conn *sql.Conn) {
	W.WEnableHooks(conn)
}
func (W _github_com_litesql_go_ha_DriverProvider) OnConnect(c driver.Conn) (driver.Conn, error) {
	return W.WOnConnect(c)
}
func (W _github_com_litesql_go_ha_DriverProvider) Open(name string) (driver.Conn, error) {
	return W.WOpen(name)
}

// _github_com_litesql_go_ha_SequenceProvider is an interface wrapper for SequenceProvider type
type _github_com_litesql_go_ha_SequenceProvider struct {
	IValue     interface{}
	WLatestSeq func() uint64
}

func (W _github_com_litesql_go_ha_SequenceProvider) LatestSeq() uint64 {
	return W.WLatestSeq()
}
